{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nclass CartService {\n  constructor() {\n    this.cartItems = new BehaviorSubject([]);\n    this.cartItems$ = this.cartItems.asObservable();\n  }\n  addToCart(drink) {\n    const currentItems = this.cartItems.getValue();\n    this.cartItems.next([...currentItems, drink]);\n  }\n  removeFromCart(index) {\n    const currentItems = this.cartItems.getValue();\n    currentItems.splice(index, 1);\n    this.cartItems.next([...currentItems]);\n  }\n  clearCart() {\n    this.cartItems.next([]);\n  }\n  static #_ = this.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { CartService };","map":{"version":3,"mappings":"AAGA,SAASA,eAAe,QAAQ,MAAM;;AAEtC,MAIaC,WAAW;EAJxBC,YAAA;IAMU,KAAAC,SAAS,GAAG,IAAIH,eAAe,CAAQ,EAAE,CAAC;IAClD,KAAAI,UAAU,GAAG,IAAI,CAACD,SAAS,CAACE,YAAY,EAAE;;EAE1CC,SAASA,CAACC,KAAU;IAClB,MAAMC,YAAY,GAAG,IAAI,CAACL,SAAS,CAACM,QAAQ,EAAE;IAC9C,IAAI,CAACN,SAAS,CAACO,IAAI,CAAC,CAAC,GAAGF,YAAY,EAAED,KAAK,CAAC,CAAC;EAC/C;EAEAI,cAAcA,CAACC,KAAa;IAC1B,MAAMJ,YAAY,GAAG,IAAI,CAACL,SAAS,CAACM,QAAQ,EAAE;IAC9CD,YAAY,CAACK,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;IAC7B,IAAI,CAACT,SAAS,CAACO,IAAI,CAAC,CAAC,GAAGF,YAAY,CAAC,CAAC;EACxC;EAEAM,SAASA,CAAA;IACP,IAAI,CAACX,SAAS,CAACO,IAAI,CAAC,EAAE,CAAC;EACzB;EAAC,QAAAK,CAAA;qBAlBUd,WAAW;EAAA;EAAA,QAAAe,EAAA;WAAXf,WAAW;IAAAgB,OAAA,EAAXhB,WAAW,CAAAiB,IAAA;IAAAC,UAAA,EAHV;EAAM;;SAGPlB,WAAW","names":["BehaviorSubject","CartService","constructor","cartItems","cartItems$","asObservable","addToCart","drink","currentItems","getValue","next","removeFromCart","index","splice","clearCart","_","_2","factory","ɵfac","providedIn"],"sourceRoot":"","sources":["/home/lucas/Documentos/Web 3/fev16/src/app/services/cart.service.ts"],"sourcesContent":["// ID12 - Comunicação entre componentes não relacionados hierarquicamente\n\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class CartService {\n\n  private cartItems = new BehaviorSubject<any[]>([]);\n  cartItems$ = this.cartItems.asObservable();\n\n  addToCart(drink: any) {\n    const currentItems = this.cartItems.getValue();\n    this.cartItems.next([...currentItems, drink]);\n  }\n\n  removeFromCart(index: number) {\n    const currentItems = this.cartItems.getValue();\n    currentItems.splice(index, 1);\n    this.cartItems.next([...currentItems]);\n  }\n\n  clearCart() {\n    this.cartItems.next([]);\n  }\n  \n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}